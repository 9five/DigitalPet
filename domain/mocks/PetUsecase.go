// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "goDDD/domain"

	mock "github.com/stretchr/testify/mock"
)

// PetUsecase is an autogenerated mock type for the PetUsecase type
type PetUsecase struct {
	mock.Mock
}

// GetPet provides a mock function with given fields: ctx, pet
func (_m *PetUsecase) GetPet(ctx context.Context, pet *domain.Pet) (*domain.Pet, error) {
	ret := _m.Called(ctx, pet)

	var r0 *domain.Pet
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet) *domain.Pet); ok {
		r0 = rf(ctx, pet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pet) error); ok {
		r1 = rf(ctx, pet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Meal provides a mock function with given fields: ctx, pet, food
func (_m *PetUsecase) Meal(ctx context.Context, pet *domain.Pet, food *domain.Food) error {
	ret := _m.Called(ctx, pet, food)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet, *domain.Food) error); ok {
		r0 = rf(ctx, pet, food)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPet provides a mock function with given fields: ctx, pet
func (_m *PetUsecase) NewPet(ctx context.Context, pet *domain.Pet) (*domain.Pet, error) {
	ret := _m.Called(ctx, pet)

	var r0 *domain.Pet
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet) *domain.Pet); ok {
		r0 = rf(ctx, pet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pet) error); ok {
		r1 = rf(ctx, pet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePet provides a mock function with given fields: ctx, pet
func (_m *PetUsecase) UpdatePet(ctx context.Context, pet *domain.Pet) error {
	ret := _m.Called(ctx, pet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet) error); ok {
		r0 = rf(ctx, pet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPetUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPetUsecase creates a new instance of PetUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPetUsecase(t mockConstructorTestingTNewPetUsecase) *PetUsecase {
	mock := &PetUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
