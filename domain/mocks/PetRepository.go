// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "goDDD/domain"

	mock "github.com/stretchr/testify/mock"
)

// PetRepository is an autogenerated mock type for the PetRepository type
type PetRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, pet, optsWhere
func (_m *PetRepository) Get(ctx context.Context, pet *domain.Pet, optsWhere ...map[string]interface{}) (*domain.Pet, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pet)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Pet
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet, ...map[string]interface{}) *domain.Pet); ok {
		r0 = rf(ctx, pet, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pet, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, pet, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gets provides a mock function with given fields: ctx, pet, optsWhere
func (_m *PetRepository) Gets(ctx context.Context, pet *domain.Pet, optsWhere ...map[string]interface{}) ([]*domain.Pet, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pet)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.Pet
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet, ...map[string]interface{}) []*domain.Pet); ok {
		r0 = rf(ctx, pet, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pet, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, pet, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, pet
func (_m *PetRepository) New(ctx context.Context, pet *domain.Pet) (*domain.Pet, error) {
	ret := _m.Called(ctx, pet)

	var r0 *domain.Pet
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet) *domain.Pet); ok {
		r0 = rf(ctx, pet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pet) error); ok {
		r1 = rf(ctx, pet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, pet
func (_m *PetRepository) Update(ctx context.Context, pet *domain.Pet) error {
	ret := _m.Called(ctx, pet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pet) error); ok {
		r0 = rf(ctx, pet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPetRepository creates a new instance of PetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPetRepository(t mockConstructorTestingTNewPetRepository) *PetRepository {
	mock := &PetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
